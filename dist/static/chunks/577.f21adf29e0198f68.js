"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[577],{9577:function(e,t,r){r.d(t,{IndexedDBStorage:function(){return s}});class s{dbName;storeName;version;#e;#t=null;constructor(e,t,r=1){this.dbName=e,this.storeName=t,this.version=r,this.#e=this.openDatabase().then(e=>{this.#t=e}).catch(e=>{throw Error(`Failed to open database: ${e}`)})}transaction(){throw Error("Method not implemented.")}openDatabase(){return new Promise((e,t)=>{let r=indexedDB.open(this.dbName,this.version);r.onerror=()=>{t(r.error)},r.onsuccess=()=>{e(r.result)},r.onupgradeneeded=()=>{let e=r.result;e.objectStoreNames.contains(this.storeName)||e.createObjectStore(this.storeName)}})}async get(e){return await this.#e,new Promise((t,r)=>{let s=this.#t.transaction(this.storeName,"readonly"),o=s.objectStore(this.storeName).get(e);o.onsuccess=()=>t(o.result),o.onerror=()=>r(o.error)})}async set(e,t){return await this.#e,new Promise((r,s)=>{let o=this.#t.transaction(this.storeName,"readwrite"),n=o.objectStore(this.storeName).put(t,e);n.onsuccess=()=>r(),n.onerror=()=>s(n.error)})}async remove(e){return await this.#e,new Promise((t,r)=>{let s=this.#t.transaction(this.storeName,"readwrite"),o=s.objectStore(this.storeName).delete(e);o.onsuccess=()=>t(),o.onerror=()=>r(o.error)})}}}}]);